{"version":3,"sources":["Person/Person.jsx","App.jsx","serviceWorker.js","index.js"],"names":["person","props","react_default","a","createElement","className","onClick","click","name","age","children","type","onChange","change","value","App","state","persons","otherState","switchNameHandler","console","log","_this","setState","nameChangedHandler","event","target","_this2","this","style","backgroundColor","font","border","padding","borderRadius","cursor","Person_Person","bind","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAaeA,SAVA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGE,QAASL,EAAMM,OAAlB,gBACgBN,EAAMO,KADtB,YACqCP,EAAMQ,IAD3C,cAGAP,EAAAC,EAAAC,cAAA,SAAIH,EAAMS,UACVR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,SAAUX,EAAMY,OAAQC,MAAOb,EAAMO,UC6E7CO,oNAjFbC,MAAQ,CACNC,QAAS,CACP,CAAET,KAAM,YAAaC,IAAK,IAC1B,CAAED,KAAM,SAAUC,IAAK,IACvB,CAAED,KAAM,QAASC,IAAK,IACtB,CAAED,KAAM,SAAUC,IAAK,KAEzBS,WAAY,mBAGdC,kBAAoB,SAAAX,GAClBY,QAAQC,IAAI,eACZC,EAAKC,SAAS,CACZN,QAAS,CACP,CAAET,KAAMA,EAAMC,IAAK,IACnB,CAAED,KAAM,UAAWC,IAAK,IACxB,CAAED,KAAM,QAASC,IAAK,IACtB,CAAED,KAAM,SAAUC,IAAK,UAK7Be,mBAAqB,SAAAC,GACnBH,EAAKC,SAAS,CACZN,QAAS,CACP,CAAET,KAAMiB,EAAMC,OAAOZ,MAAOL,IAAK,IACjC,CAAED,KAAM,UAAWC,IAAK,IACxB,CAAED,KAAM,QAASC,IAAK,IACtB,CAAED,KAAM,SAAUC,IAAK,gFAKpB,IAAAkB,EAAAC,KAUP,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,UACEyB,MAdQ,CACZC,gBAAiB,YACjBC,KAAM,UACNC,OAAQ,kBACRC,QAAS,MACTC,aAAc,OACdC,OAAQ,WASJ7B,QAAS,kBAAMqB,EAAKR,kBAAkB,cAFxC,eAMAjB,EAAAC,EAAAC,cAACgC,EAAD,CACE5B,KAAMoB,KAAKZ,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKmB,KAAKZ,MAAMC,QAAQ,GAAGR,IAC3BF,MAAOqB,KAAKT,kBAAkBkB,KAAKT,KAAM,cACzCf,OAAQe,KAAKJ,oBAJf,uBASAtB,EAAAC,EAAAC,cAACgC,EAAD,CACE5B,KAAMoB,KAAKZ,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKmB,KAAKZ,MAAMC,QAAQ,GAAGR,MAG7BP,EAAAC,EAAAC,cAACgC,EAAD,CACE5B,KAAMoB,KAAKZ,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKmB,KAAKZ,MAAMC,QAAQ,GAAGR,MAG7BP,EAAAC,EAAAC,cAACgC,EAAD,CACE5B,KAAMoB,KAAKZ,MAAMC,QAAQ,GAAGT,KAC5BC,IAAKmB,KAAKZ,MAAMC,QAAQ,GAAGR,cA3EnB6B,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4176439f.chunk.js","sourcesContent":["import React from 'react';\nimport './Person.css';\n\nconst person = props => (\n  <div className=\"Person\">\n    <p onClick={props.click}>\n      I'm a person {props.name} and I'm {props.age} years old\n    </p>\n    <p>{props.children}</p>\n    <input type=\"text\" onChange={props.change} value={props.name} />\n  </div>\n);\n\nexport default person;\n","import React from 'react';\nimport Person from './Person/Person';\nimport './App.css';\n\nclass App extends React.Component {\n  state = {\n    persons: [\n      { name: 'superpoya', age: 26 },\n      { name: 'KrBaio', age: 28 },\n      { name: 'Nebur', age: 29 },\n      { name: 'Putita', age: 29 }\n    ],\n    otherState: 'alguna mierda'\n  };\n\n  switchNameHandler = name => {\n    console.log('was clicked');\n    this.setState({\n      persons: [\n        { name: name, age: 32 },\n        { name: 'KrBaio3', age: 32 },\n        { name: 'Nebur', age: 29 },\n        { name: 'Putita', age: 29 }\n      ]\n    });\n  };\n\n  nameChangedHandler = event => {\n    this.setState({\n      persons: [\n        { name: event.target.value, age: 32 },\n        { name: 'KrBaio3', age: 32 },\n        { name: 'Nebur', age: 29 },\n        { name: 'Putita', age: 29 }\n      ]\n    });\n  };\n\n  render() {\n    const style = {\n      backgroundColor: 'cadetblue',\n      font: 'inherit',\n      border: '1px solid black',\n      padding: '8px',\n      borderRadius: '15px',\n      cursor: 'pointer'\n    };\n\n    return (\n      <div className=\"App\">\n        <h1> Hi! I 'm a React App</h1>\n        <p>This is really working</p>\n        <button\n          style={style}\n          onClick={() => this.switchNameHandler('megapoya')}\n        >\n          Switch Name\n        </button>\n        <Person\n          name={this.state.persons[0].name}\n          age={this.state.persons[0].age}\n          click={this.switchNameHandler.bind(this, 'ultra nabo')}\n          change={this.nameChangedHandler}\n        >\n          My hobby is running\n        </Person>\n\n        <Person\n          name={this.state.persons[1].name}\n          age={this.state.persons[1].age}\n        />\n\n        <Person\n          name={this.state.persons[2].name}\n          age={this.state.persons[2].age}\n        />\n\n        <Person\n          name={this.state.persons[3].name}\n          age={this.state.persons[3].age}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}